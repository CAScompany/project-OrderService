apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: order-service
  name: order-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: order-service
  strategy: {}
  template:
    metadata:
      labels:
        app: order-service
    spec:
      containers:
      - image: {{ .Values.appimage}}:{{ .Values.apptag}}
        name: order-service
        ports: 
        - containerPort: 8080
          name: order-port
        command: ["java","-jar","/app/orders-service.jar", "$(PRODUCT_SERVICE_HOST):$(PRODUCT_SERVICE_PORT)", "$(PAYMENT_SERVICE_HOST):$(PAYMENT_SERVICE_PORT)", "$(SHIPPING_SERVICE_HOST):$(SHIPPING_SERVICE_PORT)"]
        env:
        - name: PRODUCT_SERVICE_HOST
          value: "product-service" # Nombre del servicio DNS de product
        - name: PRODUCT_SERVICE_PORT
          value: "8080" # Puerto del servicio de product
        - name: PAYMENT_SERVICE_HOST
          value: "payment-service" # Nombre del servicio DNS de payment
        - name: PAYMENT_SERVICE_PORT
          value: "8080" # Puerto del servicio de payment
        - name: SHIPPING_SERVICE_HOST
          value: "shipping-service" # Nombre del servicio DNS de shipping
        - name: SHIPPING_SERVICE_PORT
          value: "8080" # Puerto del servicio de shipping




      #   volumeMounts:
      #   - name: persistent-storage
      #     mountPath: "/var/order-servicemnt"
      # volumes:
      # - name: persistent-storage
      #   persistentVolumeClaim:
      #     claimName: pvc-efs
