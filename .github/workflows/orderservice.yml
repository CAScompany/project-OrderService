name: SonarCloud analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
env:
    CODE_DIR: ./orders-service
    ECR_REPOSITORY: proyecto-ort-repo
    AWS_REGION: us-east-1
    EKS_CLUSTER: project-ort-eks
permissions:
  pull-requests: read

jobs:
  # Analysis:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: orders-service

  #   steps:
  #     - name: Code checkout 
  #       uses: actions/checkout@v4

  #     - name: test maven
  #       run: mvn clean test install

  #     - name: Set up JDK 11
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: 'temurin' 
  #         java-version: '11'   

  #     - name: Analyze with SonarCloud
  #       uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       with:
  #         args:
  #           -Dsonar.projectKey=CAScompany_project-OrderService
  #           -Dsonar.organization=cascompany
  #           -Dsonar.java.binaries=**/target/classes
  #           -Dsonar.sources=.
  #           -Dsonar.junit.reportsPath=target/surefire-reports/
  #           -Dsonar.junit.reportsPath=target/checckstyle-result.xml
  #           -Dsonar.jacoco.reportsPathtarjet/jacoco.exec
  #           -Dsonar.java.checkstyle.reportPath=target/checkstyle-result.xml

  #     - name: Revisar archivos
  #       run:  tree

  #     - name: SonarQube Quality Gate check
  #       id: sonarqube-quality-gate-check
  #       uses: sonarsource/sonarqube-quality-gate-action@master
  #       with:
  #         scanMetadataReportFile: ./.scannerwork/report-task.txt
  #       # Force to fail step after specific time. $GITHUB_WORKSPACE
  #       timeout-minutes: 5
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  FUNTIONAL_TESTING:
#    needs:  Analysis
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.CODE_DIR }}
    steps:
      - name: Code checkout 
        uses: actions/checkout@v4

      - name: test maven
        run: mvn clean test install
      
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' 
          java-version: '11'

      - name: Correr App
        run: mvn -X spring-boot:run -Dspring-boot.run.jvmArguments="-DVAR1=http://sitio:8080 -DVAR2=http://sitio:8080  -DVAR3=http://sitio:8080 " & sleep 4
  
      - name: Instalar Node.js y npm
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instalar Newman
        run: |
              npm install -g newman@latest
              npm install -g newman-reporter-htmlextra

      - name: Ejecutar pruebas funcionales con Newman
        run: |
              newman run collection.json -r cli,htmlextra --reporter-htmlextra-export testArtifacts/htmlreport.html
      - name: Revisar archivos 
        run: tree
                    
      - name: Almacenar reporte como artefacto
        uses: actions/upload-artifact@v3
        with:
          name: reporte-postman-paymant-service
          path: ./orders-service/testArtifacts

      - name: Detener la app
        run: |
            PID=$(ps aux | grep 'spring-boot:run' | grep -v grep | awk '{print $2}')
            if [ -n "$PID" ]; then
                echo "Stopping Spring Boot App with PID $PID"
                kill -9 $PID
            else
                echo "Spring Boot App not running."
            fi